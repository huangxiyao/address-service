---
# This playbook is for Address Doctor databases deployment
  - name: Download the argument's template files -> /opt/casfw
    template: src=db-deploy-functions.sh dest={{ casfw_home }} mode=0755 owner={{ useraccount }} group={{ usergroup }} force

  - name: Check disk space if it is enough and should not less than 40GB
    action: command bash {{ casfw_home }}/db-deploy-functions.sh checkDiskSpace

  - name: Initial DB latest version zip folder which will save the latest zip DB files
    action: command bash {{ casfw_home }}/db-deploy-functions.sh initialDBLatestVersionZipFolder

  - name: Copy the DB zip files to target server and put them under the db latest version zip folder
    copy: src={{ item }} dest={{ db_target_folder }}/{{ db_latest_version }}_zip mode=0755 owner={{ useraccount }} group={{ usergroup }} force
    with_fileglob:
      - "{{ db_source_folder }}/*.zip"

  - name: Initial DB latest version folder which will save the latest DB MD files
    action: command bash {{ casfw_home }}/db-deploy-functions.sh initialDBLatestVersionFolder

  - name: Unzip all the DB zip files to db latest version folder
    action: command bash {{ casfw_home }}/db-deploy-functions.sh unzipDBFiles
    async: 0
    poll: 10

  - name: Update DB symbol link and point to the latest db version folder
    action: command bash {{ casfw_home }}/db-deploy-functions.sh updateDBSymLink

########## Restart Data Match Tomcat instance1 #################
  - name: Check data-match instace 1 is running or not 
    shell: pid_file="{{ casfw_home }}/current/{{ data_match_instance1 }}/var/tomcat-ad.pid"; if [ -f $pid_file ]; then s=$(printf " %s " $(ps -e | grep $(cat $pid_file)) | awk '{ print $1 }'); if [ -n "$s" ]; then echo "tomcat-ad running $s"; fi; fi
    register: datamatch1_running_status

  - debug: msg="data-match1 is running"
    when: "'tomcat-ad running' in datamatch1_running_status.stdout"

  - name: Restart data-match intance 1 when running
    include: db-restart-tomcat.yml data_match_instance={{ data_match_instance1 }} port={{ tomcat_ad_port1 }}
    when: "'tomcat-ad running' in datamatch1_running_status.stdout"

########## Restart Data Match Tomcat instance2 #################
  - name: Check data match instace 2 is running or not 
    shell: pid_file="{{ casfw_home }}/current/{{ data_match_instance2 }}/var/tomcat-ad.pid"; if [ -f $pid_file ]; then s=$(printf " %s " $(ps -e | grep $(cat $pid_file)) | awk '{ print $1 }'); if [ -n "$s" ]; then echo "tomcat-ad running $s"; fi; fi
    register: datamatch2_running_status

  - debug: msg="data-match2 is running"
    when: "'tomcat-ad running' in datamatch2_running_status.stdout"

  - name: Restart data-match intance 2 when running
    include: db-restart-tomcat.yml data_match_instance={{ data_match_instance2 }} port={{ tomcat_ad_port2 }}
    when: "'tomcat-ad running' in datamatch2_running_status.stdout"

########## Restart Data Match Tomcat instance3 #################
  - name: Check data match instace 3 is running or not 
    shell: pid_file="{{ casfw_home }}/current/{{ data_match_instance3 }}/var/tomcat-ad.pid"; if [ -f $pid_file ]; then s=$(printf " %s " $(ps -e | grep $(cat $pid_file)) | awk '{ print $1 }'); if [ -n "$s" ]; then echo "tomcat-ad running $s"; fi; fi
    register: datamatch3_running_status

  - debug: msg="data-match3 is running"
    when: "'tomcat-ad running' in datamatch3_running_status.stdout"

  - name: Restart data-match intance 3 when running
    include: db-restart-tomcat.yml data_match_instance={{ data_match_instance3 }} port={{ tomcat_ad_port3 }}
    when: "'tomcat-ad running' in datamatch3_running_status.stdout"

  - name: Final Cleanup
    action: command bash {{ casfw_home }}/db-deploy-functions.sh finalCleanup