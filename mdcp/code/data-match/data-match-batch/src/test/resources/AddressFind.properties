# --------------------------------------------------------------------------------
# Job properties
# --------------------------------------------------------------------------------

# Application Portfolio Identifier: The identifier of the application that owns
# this batch job.

applicationPortfolioIdentifier        = 120482

# Job Identifier: A unique name for this job. This is typically a combination of
# the groupId, artifactId and a unique name. However, any unique name in a
# namespace (reverse DNS like 'com.hp.it...') is OK.

jobIdentifier                         = com.hp.it.cas.batch.job.AddressFind

# Job Run Sequence Number: A job usually runs more than once on some sort of
# schedule. Every time this job runs this number will be different.

jobRunSequenceNumber                  = 1

# Server Group Identifier: Several servers may be configured in a group and a job
# may be distributed across servers in the group. This property identifies the
# server group. It is optional and when not specified defaults to the name of the
# local host.

serverGroupIdentifier                 = AD

# Principal Name: The name of the party running this job. Used by auditing to
# record the party performing batch operations.

principalName                         = AD_BATCH

# Executable Location URL: The URL to the executable artifact containing the code
# that implements this job. For jobs implemented in Java, this is the URL to a BAR
# (Batch Archive) file.
executableLocationURIText             = file:/C:/Projects/code1/svn/120482/trunk/mdcp/code/data-match/data-match-batch/target/data-match-batch-2014.01-SNAPSHOT.bar

# Driver Module Class Name: The programming language specific class name of the
# batch driver implementation.

driverModuleClassName                 = com.hp.it.cas.match.batch.AddressFindDriver

# Driver Module Type Code: The type of batch driver. Valid values include TXDRV
# (file) and DBDRV (database).

driverModuleTypeCode                  = TXDRV

# Application logic module Class Names: A comma separated list of Spring bean
# identifiers that will be instantiated to handle transactions. For file and queue
# transaction driven jobs, the list of transaction controllers. For database
# driven jobs, the list of business process modules.

applicationLogicModuleClassNames      = 

# Commit Frequency Logical Unit of Work Count: The number of logical records to
# process before performing a commit. This is a performance tuning setting. A
# larger value generally provides better database performance. A smaller value
# limits the amount of work that needs to be retried following a restart.

commitFrequencyLogicalUnitOfWorkCount = 100

# Security Data Setup Class Names: Optional, comma-separated list of class names extending
# com.hp.it.cas.security.setup.SecurityDataSetup. BootstrapSetup is always included by default
# and should not be specified. This property is only meaningful when used in BAR Runner.

securityDataSetupClassNames           = 

# --------------------------------------------------------------------------------
# Job instance properties
# --------------------------------------------------------------------------------

# Job Instance Sequence Number: A job can be split and run in parallel instances.
# This number is the index of this instance.

jobInstanceSequenceNumber         = 1

# Job Instance Start Sequence Number: A job instance can be stopped and restarted.
# This number indicates which start this is.

jobInstanceStartSequenceNumber    = 1

# Server Configuration Item Identifier: An identifier that uniquely identifies the
# host on which the job is running. This property is optional and when not
# specified defaults to the name of the local host.

serverConfigurationItemIdentifier = 

# Computing Process Identifier: Batch Framework internal identifier for the
# process that is running the batch job. Any value is OK for testing.

computingProcessIdentifier        = 1

# Transaction Data Source URI: For jobs that read from a single file, this is the
# URL to the file. For jobs that read multiple files, this is typically the URL to
# the directory containing the files.

transactionDataSourceURIPath      = https://APP-118361-FEZ-ITG:HPInvent%402011@gvt1300.austin.hp.com/fez/118361/Address-Doctor/Input/

# Transaction Data Source Pattern: For jobs that read multiple files, this is a
# Regular Expression that selects a set of files based on their names.

transactionDataSourcePatternText  = *111.csv

# Directory where the processed files will be moved to
moveToDirectoryUriText              = https://APP-118361-FEZ-ITG:HPInvent%402011@gvt1300.austin.hp.com/fez/118361/Address-Doctor/WIP/

# File Owner Identifier

fileOwnerIdentifier               = 

# File Owner Type Code

fileOwnerTypeCode                 = 

# Queue Name: The name of a queue, where items waiting to be processes are placed.
# For example, within the CAS Batch business transaction data.

queueName                         = 

# Message Receive Timeout Millisecond Quantity:: used to determine how messages
# are read from the queue. If the timeout is less than zero, messages are read
# until the queue is empty. When no more messages are available in the queue the
# job instance does a normal shutdown. If the timeout is set to zero, wait
# indefinitely for more messages to arrive. This essentially sets the job instance
# to run forever. If the timeout is greater than zero, wait timeout milliseconds.
# If the timeout expires the job instance does a normal shutdown.

messageReceiveTimeoutMillisecondQuantity = 10

# Message Broker URI Text: A name/location of a message broker for a 
# messaging-oriented middleware implementation, in a URI syntax. The to exchange
# messages, effectively implementing decoupling.

messageBrokerUriText              = 

# Message Broker User Identifier: The user id required to connect to a message
# broker in a message-oriented middleware implementation.

messageBrokerUserIdentifier       = 

# Message Broker User Password Text: The password required to connect to a message
# broker in a message-oriented middleware implementation.

messageBrokerUserPasswordText     = 

# --------------------------------------------------------------------------------
# Job parameters
# --------------------------------------------------------------------------------

# local
#applicationDataSourceUrl          = jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=169.254.132.93)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)))
#applicationDataSourceUsername     = CASCLD
#applicationDataSourcePassword     = CASCLD

# DIET
applicationDataSourceUrl          = jdbc:oracle:thin:@(DESCRIPTION = (SDU = 32768) (enable = broken) (LOAD_BALANCE = yes) (ADDRESS = (PROTOCOL = TCP)(HOST = g9u0470.houston.hp.com)(PORT = 1525)) (CONNECT_DATA = (SERVICE_NAME = MDCD)))
applicationDataSourceUsername     = diet_mdcp_customer_service
applicationDataSourcePassword     = 093013_diet_mdcp_customer


# Address Doctor API
addressDoctorEnv          = http://it-services-itg-g2.austin.hp.com/match/

addressDoctorFEZOutputPath   = https://APP-118361-FEZ-ITG:HPInvent%402011@gvt1300.austin.hp.com/fez/118361/Address-Doctor/Output/
